{docbook}
<abstract>
<para>This chapter will show you how to integrate eXo Platform 3.5 into your system throughout the specific topics below:</para>
<itemizedlist>
  <listitem>
	<para>
	  <emphasis role="bold"><link linkend="DEV.SystemIntegration.Authentication">Authentication</link> </emphasis>
	</para>
	<para>
	The information which is related to the authentication, including:
	</para>
	<itemizedlist>
	  <listitem>
		<para>
		 <emphasis role="bold"> <link linkend="DEV.SystemIntegration.SingleSignON">Single-Sign-On (SSO)</link>  </emphasis>
		</para>
	  </listitem>
	  <listitem>
		<para>
		 <emphasis role="bold"> <link linkend="DEV.SystemIntegration.CenterAuthenticationService">Central Authentication Service (CAS)</link>  </emphasis>
		</para>
	  </listitem>
	  <listitem>
		<para>
		 <emphasis role="bold"> <link linkend="DEV.SystemIntegration.KerberosSSOOnActiveDirectory">Kerberos SSO on Active Directory</link> </emphasis>
		</para>
	  </listitem>
	</itemizedlist>
  </listitem>
  <listitem>
	<para>
	  <emphasis role="bold"><link linkend="DEV.SystemIntegration.UserIntegration">Users integration</link>  </emphasis>
	</para>
	<para>The information which is related to the users integration, including:</para>
	<itemizedlist>
	  <listitem>
		<para>
		<emphasis role="bold">  <link linkend="DEV.SystemIntegration.OrganizationService">Organization Service</link> </emphasis>
		</para>
	  </listitem>
	  <listitem>
		<para>
		 <emphasis role="bold"> <link linkend="DEV.SystemIntegration.MembershipsGroupsAndUsers">Memberships, Groups and Users</link> </emphasis>
		</para>
	  </listitem>
	  <listitem>
		<para>
		 <emphasis role="bold"> <link linkend="DEV.SystemIntegration.OrganizationAPI">Organization API</link> </emphasis>
		</para>
	  </listitem>
	</itemizedlist>
  </listitem>  
  <listitem>
	<para>
	<emphasis role="bold">  <link linkend="DEV.SystemIntegration.Email">Email</link> </emphasis>
	</para>
	<para>
	Ways to configure the email service.
	</para>
  </listitem>
</itemizedlist>
</abstract>
{docbook}

h1. Authentication {anchor:id=DEV.SystemIntegration.Authentication}

{docbook}
<para xml:id="DEV.SystemIntegration.SingleSignON">
<citetitle>
<emphasis role="bold">
Single-Sign-On (SSO)
</emphasis>
</citetitle>
</para>
{docbook}

When logging into the portal, you can gain access to many systems through portlets using a single identity. However, in many cases, the portal infrastructure must be integrated with other SSO-enabled systems. There are many different Identity Management solutions available. The GateIn documentation gives detailed configuration for different SSO implementation. For more details, see [SSO - Single Sign On|../../../reference/html/chap-Reference_Guide-SSO_Single_Sign_On.html].

{docbook}
<para xml:id="DEV.SystemIntegration.CenterAuthenticationService">
<citetitle>
<emphasis role="bold">
Central Authentication Service (CAS)
</emphasis>
</citetitle>
</para>
{docbook}

Central Authentication Service (CAS) is a Web Single-Sign-On (WebSSO), developed by JA-SIG as an open source project. CAS enables you to work on different applications to log in only once and to be recognized and authenticated by all applications. Details about CAS can be found [here|http://www.jasig.org/cas].

The CAS integration consists of two steps:

* Installing or configuring the CAS server.
* Setting up the portal to use the CAS server.

For more information on CAS configuration, see [here|../../../reference/html/sect-Reference_Guide-Single_Sign_On-CAS_Central_Authentication_Service.html].

{docbook}
<para xml:id="DEV.SystemIntegration.KerberosSSOOnActiveDirectory">
<citetitle>
<emphasis role="bold">
Kerberos SSO on Active Directory
</emphasis>
</citetitle>
</para>
{docbook}

eXo Portal 3.5 supports the Kerberos authentication on a Microsoft Active Directory. You will need to configure both your Active Directory server and the application server.

The implementation makes possible to use SPNEGO or NTLM. The client will get two authentication headers, including *Negotiate* and *NTLM* and will use whichever supported by the browser. In Firefox, it is possible to manage authentication types, but it is not in Internet Explorer; therefore, SPNEGO will be used.

To learn more about how to configure Kerberos SSO, see [here|http://wiki.exoplatform.com/xwiki/bin/view/WS/Kerberos%20SSO%20on%20Active%20Directory].

{docbook}
<para>
<prompt>
    <emphasis role="bold">See also</emphasis>
</prompt>
</para>
{docbook}
* [Users integration|#DEV.SystemIntegration.UserIntegration]
* [Email|#DEV.SystemIntegration.Email]

h1. Users integration {anchor:id=DEV.SystemIntegration.UserIntegration}

{docbook}
<para xml:id="DEV.SystemIntegration.OrganizationService">
<citetitle>
<emphasis role="bold">
Organization Service
</emphasis>
</citetitle>
</para>
{docbook}

To specify the initial Organization configuration, the content of your extension.war in _/WEB-INF/conf/organization/organization-configuration.xml_ should be edited. This file uses the portal XML configuration schema. It lists several configuration plugins.

The plugin of _org.exoplatform.services.organization.OrganizationDatabaseInitializer_ type is used to specify a list of membership types, groups and users to be created.

{docbook}
<para xml:id="DEV.SystemIntegration.MembershipsGroupsAndUsers">
<citetitle>
<emphasis role="bold">
Memberships, Groups and Users
</emphasis>
</citetitle>
</para>
{docbook}

The predefined membership types are specified in the *membershipType* field of the OrganizationConfig plugin parameter.

{code:xml}<field name="membershipType">
  <collection type="java.util.ArrayList">
    <value>
      <object type="org.exoplatform.services.organization.OrganizationConfig$MembershipType">
        <field name="type">
          <string>member</string>
        </field>
        <field name="description">
          <string>member membership type</string>
        </field>
      </object>
    </value>
    <value>
      <object type="org.exoplatform.services.organization.OrganizationConfig$MembershipType">
        <field name="type">
          <string>owner</string>
        </field>
        <field name="description">
          <string>owner membership type</string>
        </field>
      </object>
    </value>
  </collection>
</field>{code}

The predefined groups are specified in the *group* field of the OrganizationConfig plugin parameter.

{code:xml}<field name="group">
  <collection type="java.util.ArrayList">
    <value>
      <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
        <field name="name">
          <string>portal</string>
        </field>
        <field name="parentId">
          <string></string>
        </field>
        <field name="type">
          <string>hierachy</string>
        </field>
        <field name="description">
          <string>the /portal group</string>
        </field>
      </object>
    </value>
    <value>
      <object type="org.exoplatform.services.organization.OrganizationConfig$Group">
        <field name="name">
          <string>community</string>
        </field>
        <field name="parentId">
          <string>/portal</string>
        </field>
        <field name="type">
          <string>hierachy</string>
        </field>
        <field name="description">
          <string>the /portal/community group</string>
        </field>
      </object>
    </value>
    ...
  </collection>
</field>{code}

The predefined users are specified in the *membershipType* field of the OrganizationConfig plugin parameter.

{code:xml}<field name="user">
  <collection type="java.util.ArrayList">
    <value>
      <object type="org.exoplatform.services.organization.OrganizationConfig$User">
        <field name="userName">
          <string>root</string>
        </field>
        <field name="password">
          <string>exo</string>
        </field>
        <field name="firstName">
          <string>root</string>
        </field>
        <field name="lastName">
          <string>root</string>
        </field>
        <field name="email">
          <string>exoadmin@localhost</string>
        </field>
        <field name="groups">
          <string>member:/admin,member:/user,owner:/portal/admin</string>
        </field>
      </object>
    </value>
    <value>
      <object type="org.exoplatform.services.organization.OrganizationConfig$User">
        <field name="userName">
          <string>exo</string>
        </field>
        <field name="password">
          <string>exo</string>
        </field>
        <field name="firstName">
          <string>site</string>
        </field>
        <field name="lastName">
          <string>site</string>
        </field>
        <field name="email">
          <string>exo@localhost</string>
        </field>
        <field name="groups">
          <string>member:/user</string>
        </field>
      </object>
    </value>
    ...
  </collection>
</field>{code}

{docbook}
<para xml:id="DEV.SystemIntegration.OrganizationAPI">
<citetitle>
<emphasis role="bold">
Organization API
</emphasis>
</citetitle>
</para>
{docbook}

The _exo.platform.services.organization_ package has five main components: user, user profile, group, membership type and membership. There is an additional component that serves as an entry point into Organization API - _OrganizationService_ component which provides handling functionality for five components. For more details, see the [Organization API|../../../reference/html/sect-Reference_Guide-APIs-Organization_API.html] section.

{docbook}
<para>
<prompt>
    <emphasis role="bold">See also</emphasis>
</prompt>
</para>
{docbook}
* [Authentication|#DEV.SystemIntegration.Authentication]
* [Email|#DEV.SystemIntegration.Email]

h1. Email {anchor:id=DEV.SystemIntegration.Email}

The email service can use any SMTP account configured in the _configuration.properties_ file.

*File location*

|| File || Tomcat || JBoss ||
| _*configuration.properties*_ | _$PLATFOORM\_TOMCAT\_HOME/gatein/conf/configuration.properties_ | _$PLATFORM\_JBOSS\_HOME/server/default/conf/gatein/configuration.properties_ |

The relevant section looks like:

{code}# EMail
gatein.email.smtp.username=
gatein.email.smtp.password=
gatein.email.smtp.host=smtp.gmail.com
gatein.email.smtp.port=465
gatein.email.smtp.starttls.enable=true
gatein.email.smtp.auth=true
gatein.email.smtp.socketFactory.port=465
gatein.email.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory{code}

It is pre-configured for Gmail, so any Gmail account can easily be used. You simply need to use the full Gmail address as username, and fill in the password.

In corporate environments, you will want to use your corporate SMTP gateway. When using it over SSL, like in the default configuration, you may need to configure a certificate trust-store, containing your SMTP server's public certificate. Depending on the key sizes, you might also need to install Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files for your Java Runtime Environment.

{docbook}
<para>
<prompt>
    <emphasis role="bold">See also</emphasis>
</prompt>
</para>
{docbook}
* [Authentication|#DEV.SystemIntegration.Authentication]
* [Users integration|#DEV.SystemIntegration.UserIntegration]